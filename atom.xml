<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>面向Google编程</title>
  
  
  <link href="http://z-xj.com/atom.xml" rel="self"/>
  
  <link href="http://z-xj.com/"/>
  <updated>2022-04-05T06:49:14.271Z</updated>
  <id>http://z-xj.com/</id>
  
  <author>
    <name>Charles Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android精准定位线上Native崩溃</title>
    <link href="http://z-xj.com/2022/04/05/Android%E7%B2%BE%E5%87%86%E5%AE%9A%E4%BD%8D%E7%BA%BF%E4%B8%8ANative%E5%B4%A9%E6%BA%83/"/>
    <id>http://z-xj.com/2022/04/05/Android%E7%B2%BE%E5%87%86%E5%AE%9A%E4%BD%8D%E7%BA%BF%E4%B8%8ANative%E5%B4%A9%E6%BA%83/</id>
    <published>2022-04-05T00:28:56.000Z</published>
    <updated>2022-04-05T06:49:14.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景">背景</h2><p>一直以来线上的Android Native崩溃都是通过第三方SDK收集到的信息作为主要的分析方向，但是最近一段时间频繁出现了大量异常的崩溃信息，表现在出现崩溃的用户设备的内存可用占比都是低于10%。</p><p><img src="/.com//20220405002616.jpg" alt="环境信息"></p><p>起初以为是某个版本做了改动出现了内存泄露，导致线上OOM将其归结为内存优化处理。随着更多的线上崩溃出现，从其中一部分日志调用栈里发现崩溃的地方大部分并非内存分配的调用。既然不是OOM导致的崩溃，就需要分析背后的原因。</p><h2 id="现有手段">现有手段</h2><p>对于Android而言，native层Crash相比于Java层更难捕获与定位，线上发布的so更是去除了调试信息。目前已知的分析工具有以下几种:</p><ul><li><strong>ndk-stack</strong><ul><li>使用方式: 通过输入带有调试信息的so路径与崩溃日志获得源文件行号</li><li>带有调试信息的so: <strong>必须</strong></li><li>使用门槛: 低</li></ul></li><li><strong>addr2line</strong></li><li>使用方式: 通过崩溃时的程序计数器（Program Counter）与带有调试信息的so得到源文件行号<ul><li>带有调试信息的so: <strong>必须</strong></li><li>使用门槛: 低</li></ul></li><li><strong>objdump</strong><ul><li>输出so库中的汇编与源码信息，如果so库没有调试信息则只有汇编代码。</li><li>带有调试信息的so: <strong>可有可无</strong></li><li>使用门槛: 高，需要一定的汇编知识</li></ul></li></ul><p>通常一次编译会先生成一个有含有调试信息的 so， 路径通常是在 obj/local/ 各 abi 目录下，其中还有一些中间文件（比如.o文件）。再通过对这些含有调试信息的 so 进行一次 strip ， 产生对应的无调试信息so。</p><p>我们的项目中发布流程全部是由CD服务器来打包输出最终产物，但是每一次打包都会清理编译目录，导致编译结果已经没办法找回了。</p><p>所以只有objdump是目前能够使用的工具，使用命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">.&#x2F;aarch64-linux-android-objdump -S ~&#x2F;Desktop&#x2F;lib&#x2F;arm64-v8a&#x2F;libXPlayer.so &gt; ~&#x2F;Desktop&#x2F;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里解释一下这个命令:</p><ol><li>aarch64-linux-android-objdump是NDK自带的反汇编工具，有32位跟64位的区别。这里我要分析的是64位的so，所以使用的是aarch64。</li><li>-S 参数表示将反汇编代码与源代码交叉输出，我们的so没有调试信息所以只有汇编代码。</li><li>最后一个参数&gt; 表示将结果输出到~/Desktop/1.txt文件</li></ol><p>执行命令无误我们将得到一个包含汇编代码的文本文件。接下来我们需要从崩溃日志中提取崩溃点的PC(Program Counter)地址定位到对应的汇编代码。</p><p><img src="/.com//20220405111410.jpg" alt="崩溃日志"></p><p>也就是蓝色箭头所指的地方0x268e28，接着打开我们刚才导出的汇编代码文件</p><p><img src="/.com//20220405115220.jpg" alt="汇编文件"></p><p>查找268e28就可以定位到具体崩溃的汇编语句，这句的汇编的伪代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">&#x2F;&#x2F; LDR指令用于从存储器中将一个32位的字数据传送到目的寄存器中。&#x2F;&#x2F; ldrw19, [x0,#4]float w19 &#x3D; *(float *)(x0 + 4);  &#x2F;&#x2F; 将寄存器x0的值 + 4之后作为地址，读取数据写入寄存器w19。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结合崩溃日志中的信号信息 <strong>signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0000000000000004</strong> 访问了0x4这个地址，可以很容易的得出结论x0寄存器保存的值是0，最终导致访问了错误的地址。解决方案，网上追溯x0寄存器在哪里赋值了。</p><h2 id="是否有更好的方法？">是否有更好的方法？</h2><p>虽然最终通过汇编的方式解决了问题，但是如果在崩溃的点是栈上的地址就要往上回溯，中间还得处理各种跳转指令一不小心就会在汇编指令中迷失方向。</p><p>那么有没有更好的方法? 既然都已经到了汇编这一层，基于之前的逆向经验我想是否可以使用IDA来分析？</p><p>说干就干，将so拖入ida64。一路下一步之后等待它分析完成。分析完成后快捷键<strong>g</strong>跳转到我们崩溃地址268e28</p><p><img src="/.com//20220405125537.jpg" alt="ida"></p><p>你可能会说这不是跟我们导出的汇编代码文件一样吗？只是多了代码高亮。</p><p>当然如果只是这样没必要使用ida，但是它还有另外一种流程视图可以把所有的分支跳转帮我们理清代码逻辑，快速定位到这块代码的具体逻辑分支。</p><p>按下快捷键<strong>空格</strong></p><p><img src="/.com//20220405130229.jpg" alt="ida 流程视图"></p><p>最后我们只需要关注分析这块代码逻辑，并且可以顺着调用链往上追溯需要跟踪的信息。</p><h2 id="总结">总结</h2><p>虽然最终通过ida的方式解决了问题，但是比起直接通过符号表的方式去排查问题，效率会低了一点。不过汇编的方式能够比较精确的定位到所在问题，毕竟通过行号定位有可能出现逻辑太多不能确定是哪个变量出问题。</p><p>ida是个十分强大的工具，不仅在逆向中可以发挥作用。在正向开发中也能帮助我们分析应用中的问题，比如手写的算法翻译成汇编不一定高效，可以通过逆向的方式查看最终生成汇编代码去做优化。</p><h3 id="扩展阅读">扩展阅读</h3><p><a href="https://blog.csdn.net/yudan505/article/details/120337329">Android Native崩溃分析方法记录</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;一直以来线上的Android Native崩溃都是通过第三方SDK收集到的信息作为主要的分析方向，但是最近一段时间频繁出现了大量异常的崩溃信息，表现在出现崩溃的用户设备的内存可用占比都是低于10%。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;</summary>
      
    
    
    
    <category term="Android" scheme="http://z-xj.com/categories/Android/"/>
    
    
    <category term="Android" scheme="http://z-xj.com/tags/Android/"/>
    
    <category term="Crash" scheme="http://z-xj.com/tags/Crash/"/>
    
    <category term="ida" scheme="http://z-xj.com/tags/ida/"/>
    
  </entry>
  
</feed>
